#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ping-domain:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

app.debug = debug;
Object.defineProperty(app, 'argv', {enumerable:true, value: getArgvParams()});
Object.defineProperty(app, 'port', {enumerable:true, value: normalizePort(app.argv.port || process.env.PORT || '3000')});

//console.log(app);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(app.port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function getArgvParams() {
  var res = {};
  var lastName = '_paths';
  process.argv.forEach(function(val, ind){
    if (0 == val.trim().indexOf('-')) {
      lastName = val.trim().replace(/^(-*)/, '');

      //debug('lastName', lastName);
      if (lastName.length == 0)
        return true;

      if (process.argv[ind+1] && 0 != process.argv[ind+1].trim().indexOf('-')) {
        return true;
      } else {
        if (0 == lastName.indexOf('no-')) {
          Object.defineProperty(res, lastName.substr(3), {value: false, enumerable: true});
        } else
          Object.defineProperty(res, lastName, {value: true, enumerable: true});
      }
    } else {
      if (!lastName.length)
        return true;

      var q = res[lastName];
      if (q == undefined) {
        res[lastName] = val;
      } else if (Array.isArray(q)) {
        res[lastName].push(val);
      } else {
        res[lastName] = [q, val];
      }
    }
  });

  return res;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  debug('Listening on ' + bind);
}
